import { Command, InjectBot, On, Start, Update } from '@grammyjs/nestjs'
import { Injectable, Logger } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { Bot, Context, InlineKeyboard } from 'grammy'

import { FileSystemService } from './file-system.service.js'
import { TelegramService } from './telegram.service.js'
import { UserAccessService } from './user-access.service.js'

@Update()
@Injectable()
export class TelegramUpdate {
	private readonly botToken: string
	private readonly logger = new Logger(TelegramUpdate.name)
	private adminState: Map<number, 'add_user' | 'remove_user'> = new Map()

	constructor(
		@InjectBot() private readonly bot: Bot<Context>,
		private readonly configService: ConfigService,
		private readonly telegramService: TelegramService,
		private readonly fileSystemService: FileSystemService,
		private readonly userAccessService: UserAccessService,
	) {
		this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN')
	}

	@Start()
	async onStart(ctx: Context): Promise<void> {
		if (!(await this.userAccessService.isAllowed(ctx.from?.id ?? 0))) {
			await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.')
			return
		}
		await ctx.reply(
			'üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.',
		)
	}

	@Command('admin')
	async onAdmin(ctx: Context): Promise<void> {
		if (!this.userAccessService.isAdmin(ctx.from?.id ?? 0)) {
			await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
			return
		}

		const keyboard = new InlineKeyboard()
			.text('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'list_users')
			.row()
			.text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'add_user')
			.row()
			.text('‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'remove_user')

		await ctx.reply('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
			reply_markup: keyboard,
		})
	}

	@On('callback_query')
	async onCallbackQuery(ctx: Context): Promise<void> {
		if (!this.userAccessService.isAdmin(ctx.from?.id ?? 0)) {
			await ctx.answerCallbackQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
			return
		}

		const data = ctx.callbackQuery.data
		if (!data) return

		switch (data) {
			case 'list_users':
				const users = await this.userAccessService.getAllowedUsers()
				await ctx.reply(
					`–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${users.join('\n')}`,
				)
				break
			case 'add_user':
				this.adminState.set(ctx.from?.id ?? 0, 'add_user')
				await ctx.reply(
					'–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.',
				)
				break
			case 'remove_user':
				this.adminState.set(ctx.from?.id ?? 0, 'remove_user')
				await ctx.reply(
					'–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.',
				)
				break
		}

		await ctx.answerCallbackQuery()
	}

	@On('message:text')
	async onMessage(ctx: Context): Promise<void> {
		try {
			const userId = ctx.from?.id ?? 0

			if (this.userAccessService.isAdmin(userId)) {
				const state = this.adminState.get(userId)
				if (state) {
					const message = ctx.message.text
					if (!message) return

					const targetUserId = parseInt(message)
					if (isNaN(targetUserId)) {
						await ctx.reply(
							'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).',
						)
						return
					}

					if (state === 'add_user') {
						await this.userAccessService.addAllowedUser(
							targetUserId,
						)
						await ctx.reply(
							`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
						)
					} else {
						await this.userAccessService.removeAllowedUser(
							targetUserId,
						)
						await ctx.reply(
							`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,
						)
					}

					this.adminState.delete(userId)
					return
				}
			}

			if (!(await this.userAccessService.isAllowed(userId))) {
				await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.')
				return
			}

			const message = ctx.message.text
			if (!message) {
				return
			}

			this.logger.log(
				`Received message: "${message}" from user "${ctx.from?.id}"`,
			)

			await ctx.reply('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...ü§î')

			const response = await this.telegramService.processTextMessage(
				message,
				ctx.from?.id ?? 0,
			)

			this.telegramService.sendMessage(ctx, response)
		} catch (error) {
			this.logger.error(error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
		}
	}

	@On('message:photo')
	async onPhoto(ctx: Context): Promise<void> {
		try {
			if (!this.userAccessService.isAllowed(ctx.from?.id ?? 0)) {
				await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.')
				return
			}

			const photo = ctx.message.photo
			if (!photo) {
				return
			}
			this.logger.log(`–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`)
			const largestPhoto = ctx.message.photo.pop()

			await ctx.reply('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...ü§î')

			if (largestPhoto) {
				const fileId = largestPhoto.file_id
				this.logger.log(`File ID –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ: ${fileId}`)

				const file = await ctx.api.getFile(fileId)
				this.logger.log(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: ${JSON.stringify(file)}`)
				const downloadPath =
					await this.fileSystemService.processPhoto(file)

				const response = await this.telegramService.processPhotoMessage(
					downloadPath,
					ctx.message.caption ?? undefined,
					ctx.from?.id ?? undefined,
				)

				this.telegramService.sendMessage(ctx, response)
			} else {
				await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ.')
			}
		} catch (error) {
			this.logger.error(error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.')
		}
	}

	@On('message:voice')
	async onVoice(ctx: Context): Promise<void> {
		try {
			if (!this.userAccessService.isAllowed(ctx.from?.id ?? 0)) {
				await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.')
				return
			}

			const voice = ctx.message.voice
			if (!voice) {
				return
			}

			const fileId = voice.file_id
			this.logger.log(
				`File ID –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${fileId}`,
			)

			const file = await ctx.api.getFile(fileId)
			this.logger.log(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: ${JSON.stringify(file)}`)

			const downloadPath = await this.fileSystemService.processVoice(file)

			const response = await this.telegramService.processVoiceMessage(
				downloadPath,
				ctx.from?.id ?? undefined,
			)

			this.telegramService.sendMessage(ctx, response)
		} catch (error) {
			this.logger.error(error)
			await ctx.reply(
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
			)
		}
	}
}
